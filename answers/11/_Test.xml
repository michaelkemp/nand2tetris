<class>
  <keyword> class </keyword>
  <identifier> Test </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> a </identifier>
    <symbol> , </symbol>
    <identifier> b </identifier>
    <symbol> , </symbol>
    <identifier> c </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> static </keyword>
    <keyword> char </keyword>
    <identifier> d </identifier>
    <symbol> , </symbol>
    <identifier> e </identifier>
    <symbol> , </symbol>
    <identifier> f </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> boolean </keyword>
    <identifier> yes </identifier>
    <symbol> , </symbol>
    <identifier> no </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> static </keyword>
    <keyword> int </keyword>
    <identifier> s1 </identifier>
    <symbol> , </symbol>
    <identifier> d1 </identifier>
    <symbol> , </symbol>
    <identifier> l1 </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <identifier> Test </identifier>
    <identifier> new </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> xa </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> xb </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> xc </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> boolean </keyword>
        <identifier> test1 </identifier>
        <symbol> , </symbol>
        <identifier> testa </identifier>
        <symbol> , </symbol>
        <identifier> thingmy </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> char </keyword>
        <identifier> test2 </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <identifier> Test </identifier>
        <identifier> test3 </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> a </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> xa </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <integerConstant> 5 </integerConstant>
                </term>
                <symbol> + </symbol>
                <term>
                  <identifier> i </identifier>
                </term>
              </expression>
              <symbol> ] </symbol>
            </term>
            <symbol> * </symbol>
            <term>
              <integerConstant> 5 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> b </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> xb </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 4 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <symbol> * </symbol>
            <term>
              <integerConstant> 9 </integerConstant>
            </term>
            <symbol> + </symbol>
            <term>
              <identifier> myMeth1 </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <stringConstant> w </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <keyword> false </keyword>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 3 </integerConstant>
                  </term>
                  <symbol> * </symbol>
                  <term>
                    <integerConstant> 4 </integerConstant>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <symbol> - </symbol>
                    <term>
                      <integerConstant> 6 </integerConstant>
                    </term>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> c </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 11 </integerConstant>
            </term>
            <symbol> / </symbol>
            <term>
              <identifier> xc </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> myMeth1 </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> char </keyword>
      <identifier> a </identifier>
      <symbol> , </symbol>
      <keyword> boolean </keyword>
      <identifier> b </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> i </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> boolean </keyword>
        <identifier> exit </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> exit </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> b </identifier>
            </term>
            <symbol> + </symbol>
            <term>
              <integerConstant> 5 </integerConstant>
            </term>
            <symbol> / </symbol>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <integerConstant> 7 </integerConstant>
                </term>
                <symbol> * </symbol>
                <term>
                  <integerConstant> 3 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <integerConstant> 7 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> double </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> a </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> thingy </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> thingy </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Test </identifier>
              <symbol> . </symbol>
              <identifier> myMeth1 </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <stringConstant> l </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <keyword> false </keyword>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 9 </integerConstant>
                  </term>
                  <symbol> * </symbol>
                  <term>
                    <symbol> - </symbol>
                    <term>
                      <integerConstant> 3 </integerConstant>
                    </term>
                  </term>
                  <symbol> * </symbol>
                  <term>
                    <integerConstant> 4 </integerConstant>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <symbol> - </symbol>
                    <term>
                      <integerConstant> 6 </integerConstant>
                    </term>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <symbol> - </symbol>
              <term>
                <identifier> a </identifier>
              </term>
            </term>
            <symbol> * </symbol>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
            <symbol> * </symbol>
            <term>
              <identifier> myMeth1 </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <stringConstant> a </stringConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <keyword> true </keyword>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> thingy </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
            <symbol> + </symbol>
            <term>
              <integerConstant> 11 </integerConstant>
            </term>
            <symbol> / </symbol>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <integerConstant> 4 </integerConstant>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 5 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
