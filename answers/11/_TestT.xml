<tokens>
<keyword> class </keyword>
<identifier> Test </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> a </identifier>
<symbol> , </symbol>
<identifier> b </identifier>
<symbol> , </symbol>
<identifier> c </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<keyword> char </keyword>
<identifier> d </identifier>
<symbol> , </symbol>
<identifier> e </identifier>
<symbol> , </symbol>
<identifier> f </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> boolean </keyword>
<identifier> yes </identifier>
<symbol> , </symbol>
<identifier> no </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> s1 </identifier>
<symbol> , </symbol>
<identifier> d1 </identifier>
<symbol> , </symbol>
<identifier> l1 </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> Test </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> xa </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> xb </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> xc </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> test1 </identifier>
<symbol> , </symbol>
<identifier> testa </identifier>
<symbol> , </symbol>
<identifier> thingmy </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier> test2 </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> Test </identifier>
<identifier> test3 </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> = </symbol>
<identifier> xa </identifier>
<symbol> [ </symbol>
<integerConstant> 5 </integerConstant>
<symbol> + </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> * </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> b </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> xb </identifier>
<symbol> + </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ) </symbol>
<symbol> * </symbol>
<integerConstant> 9 </integerConstant>
<symbol> + </symbol>
<identifier> myMeth1 </identifier>
<symbol> ( </symbol>
<stringConstant> w </stringConstant>
<symbol> , </symbol>
<keyword> false </keyword>
<symbol> , </symbol>
<integerConstant> 3 </integerConstant>
<symbol> * </symbol>
<integerConstant> 4 </integerConstant>
<symbol> + </symbol>
<symbol> - </symbol>
<integerConstant> 6 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> c </identifier>
<symbol> = </symbol>
<integerConstant> 11 </integerConstant>
<symbol> / </symbol>
<identifier> xc </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> myMeth1 </identifier>
<symbol> ( </symbol>
<keyword> char </keyword>
<identifier> a </identifier>
<symbol> , </symbol>
<keyword> boolean </keyword>
<identifier> b </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> exit </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> exit </identifier>
<symbol> = </symbol>
<identifier> b </identifier>
<symbol> + </symbol>
<integerConstant> 5 </integerConstant>
<symbol> / </symbol>
<symbol> ( </symbol>
<integerConstant> 7 </integerConstant>
<symbol> * </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<integerConstant> 7 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> double </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> a </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> thingy </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> thingy </identifier>
<symbol> = </symbol>
<identifier> Test </identifier>
<symbol> . </symbol>
<identifier> myMeth1 </identifier>
<symbol> ( </symbol>
<stringConstant> l </stringConstant>
<symbol> , </symbol>
<keyword> false </keyword>
<symbol> , </symbol>
<integerConstant> 9 </integerConstant>
<symbol> * </symbol>
<symbol> - </symbol>
<integerConstant> 3 </integerConstant>
<symbol> * </symbol>
<integerConstant> 4 </integerConstant>
<symbol> + </symbol>
<symbol> - </symbol>
<integerConstant> 6 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> - </symbol>
<identifier> a </identifier>
<symbol> * </symbol>
<integerConstant> 2 </integerConstant>
<symbol> * </symbol>
<identifier> myMeth1 </identifier>
<symbol> ( </symbol>
<stringConstant> a </stringConstant>
<symbol> , </symbol>
<keyword> true </keyword>
<symbol> , </symbol>
<identifier> thingy </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<integerConstant> 11 </integerConstant>
<symbol> / </symbol>
<symbol> ( </symbol>
<integerConstant> 4 </integerConstant>
<symbol> - </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
