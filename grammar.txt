
Lexical elements
================

keyword:            class, constructor, function, method, field, static, var, int, char, boolean, void, true, false, null, this, let, do, if, else, while, return
symbol:             { } ( ) [ ] . , ; + - * / & | < > = ~
integerConstant:    0 .. 32767
stringConstant:     sequence of unicode characters enclosed in double quotes "" -- not including newlines or doublequotes
identifier:         sequence of letters, digits, and underscores -- not starting with a digit

Program Structure
=================
    x*: x appears 0 or more times
    x?: x appears 0 or 1 times

class:          'class' className '{' classVarDec* subroutineDec* '}'
classVarDec:    ('static'|'field') type varName (',' varName)* ';'
type:           'int'|'char'|'boolean'|className
subroutineDec:  ('constructor'|'function'|'method') ('void'|type) subroutineName '(' parameterList ')' subroutineBody
parameterList:  ((type varName) (',' type varName)*)?
subroutineBody: '{' varDec* statements '}'
varDec:         'var' type varName (',' varName)* ';'
className:      identifier
subroutineName: identifier
varName:        identifier

Statements
==========
    x*: x appears 0 or more times
    x?: x appears 0 or 1 times

statements:         statement*
statement:          letStatement | ifStatement | whileStatement | doStatement | returnStatement
letStatement:       'let' varName ('[' expression ']')? '=' expression ';'
ifStatement:        'if' '(' expression ')' '{' statements '}' ('else' '{' statements '}')?
whileStatement:     'while' '(' expression ')' '{' statements '}'
doStatement:        'do' subroutineCall ';'
returnStatement:    'return' expression? ';' 


Expressions
===========
    x*: x appears 0 or more times
    x?: x appears 0 or 1 times

expression:         term (op term)*
term:               integerConstant | stringConstant | keywordConstant | varName | varName '[' expression ']' | subroutineCall | '(' expression ')' | unaryOP term
subroutineCall:     subroutineName '(' expressionList ')' | (className|varName)'.'subroutineName '(' expressionList ')'
expressionList:     (expression (',' expression)* )?
op:                 '+' | '-' | '*' | '/' | '&' | '|' | '<' | '>' | '='
unaryOP:            '-' | '~'
keywordConstant:    'true' | 'false' | 'null' | 'this'


